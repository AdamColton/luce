// Generated by gothicgo/bootstrap - Do not modify

package gothicgo

import (
	"github.com/testify/assert"
	"testing"
)

func TestArrayTypeTypeGen(t *testing.T) {
	x := IntType.Array(5)

	assert.Equal(t, ArrayKind, x.Kind())
	assert.Equal(t, PkgBuiltin(), x.PackageRef())

	n := x.Named("Foo")
	assert.Equal(t, "Foo", n.Name())
	assert.Equal(t, x, n.Type)

	n = x.Unnamed()
	assert.Equal(t, "", n.Name())
	assert.Equal(t, x, n.Type)

	p := x.Ptr()
	assert.Equal(t, PointerKind, p.Kind())
	assert.Equal(t, x, p.Elem())

	s := x.Slice()
	assert.Equal(t, SliceKind, s.Kind())
	assert.Equal(t, x, s.Elem())

	a := x.Array(13)
	assert.Equal(t, ArrayKind, a.Kind())
	assert.Equal(t, x, a.Elem())

	mp := x.AsMapElem(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Elem())

	mp = x.AsMapKey(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.MapKey())

	str := PrefixWriteToString(x, DefaultPrefixer)
	assert.Equal(t, "[5]int", str)
}

func TestbuiltinTypeGen(t *testing.T) {
	x := IntType

	assert.Equal(t, IntKind, x.Kind())
	assert.Equal(t, PkgBuiltin(), x.PackageRef())

	n := x.Named("Foo")
	assert.Equal(t, "Foo", n.Name())
	assert.Equal(t, x, n.Type)

	n = x.Unnamed()
	assert.Equal(t, "", n.Name())
	assert.Equal(t, x, n.Type)

	p := x.Ptr()
	assert.Equal(t, PointerKind, p.Kind())
	assert.Equal(t, x, p.Elem())

	s := x.Slice()
	assert.Equal(t, SliceKind, s.Kind())
	assert.Equal(t, x, s.Elem())

	a := x.Array(13)
	assert.Equal(t, ArrayKind, a.Kind())
	assert.Equal(t, x, a.Elem())

	mp := x.AsMapElem(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Elem())

	mp = x.AsMapKey(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.MapKey())

	str := PrefixWriteToString(x, DefaultPrefixer)
	assert.Equal(t, "int", str)
}
