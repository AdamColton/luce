// Generated by gothicgo/bootstrap - Do not modify

package gothicgo

import (
	"testing"

	"github.com/testify/assert"
)

func TestArrayTypeTypeGen(t *testing.T) {
	x := IntType.Array(5)

	assert.Equal(t, ArrayKind, x.Kind())
	assert.Equal(t, PkgBuiltin(), x.PackageRef())

	n := x.Named("Foo")
	assert.Equal(t, "Foo", n.Name())
	assert.Equal(t, x, n.T)

	n = x.Unnamed()
	assert.Equal(t, "", n.Name())
	assert.Equal(t, x, n.T)

	p := x.Pointer()
	assert.Equal(t, PointerKind, p.Kind())
	assert.Equal(t, x, p.Elem())

	s := x.Slice()
	assert.Equal(t, SliceKind, s.Kind())
	assert.Equal(t, x, s.Elem())

	a := x.Array(13)
	assert.Equal(t, ArrayKind, a.Kind())
	assert.Equal(t, x, a.Elem())

	mp := x.AsMapElem(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Elem())

	mp = x.AsMapKey(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Key)

	assert.Equal(t, IntType, x.Elem())

	str := PrefixWriteToString(x, DefaultPrefixer)
	assert.Equal(t, "[5]int", str)
}

func TestbuiltinTypeGen(t *testing.T) {
	x := IntType

	assert.Equal(t, IntKind, x.Kind())
	assert.Equal(t, PkgBuiltin(), x.PackageRef())

	n := x.Named("Foo")
	assert.Equal(t, "Foo", n.Name())
	assert.Equal(t, x, n.T)

	n = x.Unnamed()
	assert.Equal(t, "", n.Name())
	assert.Equal(t, x, n.T)

	p := x.Pointer()
	assert.Equal(t, PointerKind, p.Kind())
	assert.Equal(t, x, p.Elem())

	s := x.Slice()
	assert.Equal(t, SliceKind, s.Kind())
	assert.Equal(t, x, s.Elem())

	a := x.Array(13)
	assert.Equal(t, ArrayKind, a.Kind())
	assert.Equal(t, x, a.Elem())

	mp := x.AsMapElem(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Elem())

	mp = x.AsMapKey(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Key)

	str := PrefixWriteToString(x, DefaultPrefixer)
	assert.Equal(t, "int", str)
}

func TestExternalTypeTypeGen(t *testing.T) {
	pkg := MustExternalPackageRef("foo")
	x := pkg.MustExternalType("Bar")

	assert.Equal(t, TypeDefKind, x.Kind())
	assert.Equal(t, pkg, x.PackageRef())

	n := x.Named("Foo")
	assert.Equal(t, "Foo", n.Name())
	assert.Equal(t, x, n.T)

	n = x.Unnamed()
	assert.Equal(t, "", n.Name())
	assert.Equal(t, x, n.T)

	p := x.Pointer()
	assert.Equal(t, PointerKind, p.Kind())
	assert.Equal(t, x, p.Elem())

	s := x.Slice()
	assert.Equal(t, SliceKind, s.Kind())
	assert.Equal(t, x, s.Elem())

	a := x.Array(13)
	assert.Equal(t, ArrayKind, a.Kind())
	assert.Equal(t, x, a.Elem())

	mp := x.AsMapElem(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Elem())

	mp = x.AsMapKey(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Key)

	str := PrefixWriteToString(x, DefaultPrefixer)
	assert.Equal(t, "foo.Bar", str)
}

func TestFuncSigTypeGen(t *testing.T) {
	args := []NameType{
		IntType.Named("a"),
		StringType.Named("b"),
	}
	x := NewFuncSig("Foo", args...).
		UnnamedRets(StringType)

	assert.Equal(t, FuncKind, x.Kind())
	assert.Equal(t, PkgBuiltin(), x.PackageRef())

	n := x.Named("Foo")
	assert.Equal(t, "Foo", n.Name())
	assert.Equal(t, x, n.T)

	n = x.Unnamed()
	assert.Equal(t, "", n.Name())
	assert.Equal(t, x, n.T)

	p := x.Pointer()
	assert.Equal(t, PointerKind, p.Kind())
	assert.Equal(t, x, p.Elem())

	s := x.Slice()
	assert.Equal(t, SliceKind, s.Kind())
	assert.Equal(t, x, s.Elem())

	a := x.Array(13)
	assert.Equal(t, ArrayKind, a.Kind())
	assert.Equal(t, x, a.Elem())

	mp := x.AsMapElem(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Elem())

	mp = x.AsMapKey(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Key)

	str := PrefixWriteToString(x, DefaultPrefixer)
	assert.Equal(t, "func Foo(a int, b string) string", str)
}

func TestMapTypeTypeGen(t *testing.T) {
	x := MapOf(IntType, StringType)

	assert.Equal(t, MapKind, x.Kind())
	assert.Equal(t, PkgBuiltin(), x.PackageRef())

	n := x.Named("Foo")
	assert.Equal(t, "Foo", n.Name())
	assert.Equal(t, x, n.T)

	n = x.Unnamed()
	assert.Equal(t, "", n.Name())
	assert.Equal(t, x, n.T)

	p := x.Pointer()
	assert.Equal(t, PointerKind, p.Kind())
	assert.Equal(t, x, p.Elem())

	s := x.Slice()
	assert.Equal(t, SliceKind, s.Kind())
	assert.Equal(t, x, s.Elem())

	a := x.Array(13)
	assert.Equal(t, ArrayKind, a.Kind())
	assert.Equal(t, x, a.Elem())

	mp := x.AsMapElem(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Elem())

	mp = x.AsMapKey(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Key)

	assert.Equal(t, StringType, x.Elem())

	str := PrefixWriteToString(x, DefaultPrefixer)
	assert.Equal(t, "map[int]string", str)
}

func TestPointerTypeTypeGen(t *testing.T) {
	x := IntType.Pointer()

	assert.Equal(t, PointerKind, x.Kind())
	assert.Equal(t, PkgBuiltin(), x.PackageRef())

	n := x.Named("Foo")
	assert.Equal(t, "Foo", n.Name())
	assert.Equal(t, x, n.T)

	n = x.Unnamed()
	assert.Equal(t, "", n.Name())
	assert.Equal(t, x, n.T)

	p := x.Pointer()
	assert.Equal(t, PointerKind, p.Kind())
	assert.Equal(t, x, p.Elem())

	s := x.Slice()
	assert.Equal(t, SliceKind, s.Kind())
	assert.Equal(t, x, s.Elem())

	a := x.Array(13)
	assert.Equal(t, ArrayKind, a.Kind())
	assert.Equal(t, x, a.Elem())

	mp := x.AsMapElem(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Elem())

	mp = x.AsMapKey(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Key)

	assert.Equal(t, IntType, x.Elem())

	str := PrefixWriteToString(x, DefaultPrefixer)
	assert.Equal(t, "*int", str)
}

func TestSliceTypeTypeGen(t *testing.T) {
	x := IntType.Slice()

	assert.Equal(t, SliceKind, x.Kind())
	assert.Equal(t, PkgBuiltin(), x.PackageRef())

	n := x.Named("Foo")
	assert.Equal(t, "Foo", n.Name())
	assert.Equal(t, x, n.T)

	n = x.Unnamed()
	assert.Equal(t, "", n.Name())
	assert.Equal(t, x, n.T)

	p := x.Pointer()
	assert.Equal(t, PointerKind, p.Kind())
	assert.Equal(t, x, p.Elem())

	s := x.Slice()
	assert.Equal(t, SliceKind, s.Kind())
	assert.Equal(t, x, s.Elem())

	a := x.Array(13)
	assert.Equal(t, ArrayKind, a.Kind())
	assert.Equal(t, x, a.Elem())

	mp := x.AsMapElem(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Elem())

	mp = x.AsMapKey(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Key)

	assert.Equal(t, IntType, x.Elem())

	str := PrefixWriteToString(x, DefaultPrefixer)
	assert.Equal(t, "[]int", str)
}

func TestTypeDefTypeGen(t *testing.T) {
	ctx := NewMemoryContext()
	x, err := ctx.NewTypeDef("Foo", StringType)
	assert.NoError(t, err)

	assert.Equal(t, TypeDefKind, x.Kind())
	assert.Equal(t, ctx.MustPackage("foo"), x.PackageRef())

	n := x.Named("Foo")
	assert.Equal(t, "Foo", n.Name())
	assert.Equal(t, x, n.T)

	n = x.Unnamed()
	assert.Equal(t, "", n.Name())
	assert.Equal(t, x, n.T)

	p := x.Pointer()
	assert.Equal(t, PointerKind, p.Kind())
	assert.Equal(t, x, p.Elem())

	s := x.Slice()
	assert.Equal(t, SliceKind, s.Kind())
	assert.Equal(t, x, s.Elem())

	a := x.Array(13)
	assert.Equal(t, ArrayKind, a.Kind())
	assert.Equal(t, x, a.Elem())

	mp := x.AsMapElem(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Elem())

	mp = x.AsMapKey(IntType)
	assert.Equal(t, MapKind, mp.Kind())
	assert.Equal(t, x, mp.Key)

	assert.Equal(t, StringType, x.Elem())

	str := PrefixWriteToString(x, DefaultPrefixer)
	assert.Equal(t, "foo.Foo", str)
}
