// Generated by gothicgo/bootstrap - Do not modify

package gothicgo

// Named fulfills Type. Returns a NameType with the given name.
func (a *ArrayType) Named(name string) NameType { return NameType{name, a} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (a *ArrayType) Unnamed() NameType { return NameType{"", a} }

// Pointer funfills Type.
func (a *ArrayType) Pointer() PointerType { return PointerTo(a) }

// Slice funfills Type.
func (a *ArrayType) Slice() *SliceType { return SliceOf(a) }

// Array funfills Type.
func (a *ArrayType) Array(size int) *ArrayType { return ArrayOf(a, size) }

// AsMapElem funfills Type.
func (a *ArrayType) AsMapElem(key Type) *MapType { return MapOf(key, a) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (a *ArrayType) AsMapKey(elem Type) *MapType { return MapOf(a, elem) }

// Kind fulfills Type. Returns ArrayKind.
func (a *ArrayType) Kind() Kind { return ArrayKind }

// Named fulfills Type. Returns a NameType with the given name.
func (b builtin) Named(name string) NameType { return NameType{name, b} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (b builtin) Unnamed() NameType { return NameType{"", b} }

// Pointer funfills Type.
func (b builtin) Pointer() PointerType { return PointerTo(b) }

// Slice funfills Type.
func (b builtin) Slice() *SliceType { return SliceOf(b) }

// Array funfills Type.
func (b builtin) Array(size int) *ArrayType { return ArrayOf(b, size) }

// AsMapElem funfills Type.
func (b builtin) AsMapElem(key Type) *MapType { return MapOf(key, b) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (b builtin) AsMapKey(elem Type) *MapType { return MapOf(b, elem) }

// Named fulfills Type. Returns a NameType with the given name.
func (t *TypeRef) Named(name string) NameType { return NameType{name, t} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (t *TypeRef) Unnamed() NameType { return NameType{"", t} }

// Pointer funfills Type.
func (t *TypeRef) Pointer() PointerType { return PointerTo(t) }

// Slice funfills Type.
func (t *TypeRef) Slice() *SliceType { return SliceOf(t) }

// Array funfills Type.
func (t *TypeRef) Array(size int) *ArrayType { return ArrayOf(t, size) }

// AsMapElem funfills Type.
func (t *TypeRef) AsMapElem(key Type) *MapType { return MapOf(key, t) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (t *TypeRef) AsMapKey(elem Type) *MapType { return MapOf(t, elem) }

// Kind fulfills Type. Returns TypeDefKind.
func (t *TypeRef) Kind() Kind { return TypeDefKind }

// Named fulfills Type. Returns a NameType with the given name.
func (f *FuncType) Named(name string) NameType { return NameType{name, f} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (f *FuncType) Unnamed() NameType { return NameType{"", f} }

// Pointer funfills Type.
func (f *FuncType) Pointer() PointerType { return PointerTo(f) }

// Slice funfills Type.
func (f *FuncType) Slice() *SliceType { return SliceOf(f) }

// Array funfills Type.
func (f *FuncType) Array(size int) *ArrayType { return ArrayOf(f, size) }

// AsMapElem funfills Type.
func (f *FuncType) AsMapElem(key Type) *MapType { return MapOf(key, f) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (f *FuncType) AsMapKey(elem Type) *MapType { return MapOf(f, elem) }

// Kind fulfills Type. Returns FuncKind.
func (f *FuncType) Kind() Kind { return FuncKind }

// Named fulfills Type. Returns a NameType with the given name.
func (m *MapType) Named(name string) NameType { return NameType{name, m} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (m *MapType) Unnamed() NameType { return NameType{"", m} }

// Pointer funfills Type.
func (m *MapType) Pointer() PointerType { return PointerTo(m) }

// Slice funfills Type.
func (m *MapType) Slice() *SliceType { return SliceOf(m) }

// Array funfills Type.
func (m *MapType) Array(size int) *ArrayType { return ArrayOf(m, size) }

// AsMapElem funfills Type.
func (m *MapType) AsMapElem(key Type) *MapType { return MapOf(key, m) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (m *MapType) AsMapKey(elem Type) *MapType { return MapOf(m, elem) }

// Kind fulfills Type. Returns MapKind.
func (m *MapType) Kind() Kind { return MapKind }

// Named fulfills Type. Returns a NameType with the given name.
func (p *pointer) Named(name string) NameType { return NameType{name, p} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (p *pointer) Unnamed() NameType { return NameType{"", p} }

// Pointer funfills Type.
func (p *pointer) Pointer() PointerType { return PointerTo(p) }

// Slice funfills Type.
func (p *pointer) Slice() *SliceType { return SliceOf(p) }

// Array funfills Type.
func (p *pointer) Array(size int) *ArrayType { return ArrayOf(p, size) }

// AsMapElem funfills Type.
func (p *pointer) AsMapElem(key Type) *MapType { return MapOf(key, p) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (p *pointer) AsMapKey(elem Type) *MapType { return MapOf(p, elem) }

// Kind fulfills Type. Returns PointerKind.
func (p *pointer) Kind() Kind { return PointerKind }

// Named fulfills Type. Returns a NameType with the given name.
func (s *SliceType) Named(name string) NameType { return NameType{name, s} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (s *SliceType) Unnamed() NameType { return NameType{"", s} }

// Pointer funfills Type.
func (s *SliceType) Pointer() PointerType { return PointerTo(s) }

// Slice funfills Type.
func (s *SliceType) Slice() *SliceType { return SliceOf(s) }

// Array funfills Type.
func (s *SliceType) Array(size int) *ArrayType { return ArrayOf(s, size) }

// AsMapElem funfills Type.
func (s *SliceType) AsMapElem(key Type) *MapType { return MapOf(key, s) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (s *SliceType) AsMapKey(elem Type) *MapType { return MapOf(s, elem) }

// Kind fulfills Type. Returns SliceKind.
func (s *SliceType) Kind() Kind { return SliceKind }

// Named fulfills Type. Returns a NameType with the given name.
func (i *InterfaceType) Named(name string) NameType { return NameType{name, i} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (i *InterfaceType) Unnamed() NameType { return NameType{"", i} }

// Pointer funfills Type.
func (i *InterfaceType) Pointer() PointerType { return PointerTo(i) }

// Slice funfills Type.
func (i *InterfaceType) Slice() *SliceType { return SliceOf(i) }

// Array funfills Type.
func (i *InterfaceType) Array(size int) *ArrayType { return ArrayOf(i, size) }

// AsMapElem funfills Type.
func (i *InterfaceType) AsMapElem(key Type) *MapType { return MapOf(key, i) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (i *InterfaceType) AsMapKey(elem Type) *MapType { return MapOf(i, elem) }

// Kind fulfills Type. Returns InterfaceKind.
func (i *InterfaceType) Kind() Kind { return InterfaceKind }

// Named fulfills Type. Returns a NameType with the given name.
func (i *InterfaceRef) Named(name string) NameType { return NameType{name, i} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (i *InterfaceRef) Unnamed() NameType { return NameType{"", i} }

// Pointer funfills Type.
func (i *InterfaceRef) Pointer() PointerType { return PointerTo(i) }

// Slice funfills Type.
func (i *InterfaceRef) Slice() *SliceType { return SliceOf(i) }

// Array funfills Type.
func (i *InterfaceRef) Array(size int) *ArrayType { return ArrayOf(i, size) }

// AsMapElem funfills Type.
func (i *InterfaceRef) AsMapElem(key Type) *MapType { return MapOf(key, i) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (i *InterfaceRef) AsMapKey(elem Type) *MapType { return MapOf(i, elem) }

// Kind fulfills Type. Returns InterfaceKind.
func (i *InterfaceRef) Kind() Kind { return InterfaceKind }

// Named fulfills Type. Returns a NameType with the given name.
func (s *StructType) Named(name string) NameType { return NameType{name, s} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (s *StructType) Unnamed() NameType { return NameType{"", s} }

// Pointer funfills Type.
func (s *StructType) Pointer() PointerType { return PointerTo(s) }

// Slice funfills Type.
func (s *StructType) Slice() *SliceType { return SliceOf(s) }

// Array funfills Type.
func (s *StructType) Array(size int) *ArrayType { return ArrayOf(s, size) }

// AsMapElem funfills Type.
func (s *StructType) AsMapElem(key Type) *MapType { return MapOf(key, s) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (s *StructType) AsMapKey(elem Type) *MapType { return MapOf(s, elem) }

// Kind fulfills Type. Returns StructKind.
func (s *StructType) Kind() Kind { return StructKind }
