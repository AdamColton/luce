// Generated by gothicgo/bootstrap - Do not modify

package gothicgo

// Named fulfills Type. Returns a NameType with the given name.
func (a *ArrayType) Named(name string) NameType { return NameType{name, a} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (a *ArrayType) Unnamed() NameType { return NameType{"", a} }

// Ptr funfills Type.
func (a *ArrayType) Ptr() PointerType { return PointerTo(a) }

// Slice funfills Type.
func (a *ArrayType) Slice() SliceType { return SliceOf(a) }

// Array funfills Type.
func (a *ArrayType) Array(size int) *ArrayType { return ArrayOf(a, size) }

// AsMapElem funfills Type.
func (a *ArrayType) AsMapElem(key Type) MapType { return MapOf(key, a) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (a *ArrayType) AsMapKey(elem Type) MapType { return MapOf(a, elem) }

// Kind fulfills Type. Returns ArrayKind.
func (a *ArrayType) Kind() Kind { return ArrayKind }

// Named fulfills Type. Returns a NameType with the given name.
func (b builtin) Named(name string) NameType { return NameType{name, b} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (b builtin) Unnamed() NameType { return NameType{"", b} }

// Ptr funfills Type.
func (b builtin) Ptr() PointerType { return PointerTo(b) }

// Slice funfills Type.
func (b builtin) Slice() SliceType { return SliceOf(b) }

// Array funfills Type.
func (b builtin) Array(size int) *ArrayType { return ArrayOf(b, size) }

// AsMapElem funfills Type.
func (b builtin) AsMapElem(key Type) MapType { return MapOf(key, b) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (b builtin) AsMapKey(elem Type) MapType { return MapOf(b, elem) }

// Named fulfills Type. Returns a NameType with the given name.
func (e *ExternalType) Named(name string) NameType { return NameType{name, e} }

// Unnamed funfills Type. Returns a NameType with an empty Name.
func (e *ExternalType) Unnamed() NameType { return NameType{"", e} }

// Ptr funfills Type.
func (e *ExternalType) Ptr() PointerType { return PointerTo(e) }

// Slice funfills Type.
func (e *ExternalType) Slice() SliceType { return SliceOf(e) }

// Array funfills Type.
func (e *ExternalType) Array(size int) *ArrayType { return ArrayOf(e, size) }

// AsMapElem funfills Type.
func (e *ExternalType) AsMapElem(key Type) MapType { return MapOf(key, e) }

// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (e *ExternalType) AsMapKey(elem Type) MapType { return MapOf(e, elem) }

// Kind fulfills Type. Returns TypeDefKind.
func (e *ExternalType) Kind() Kind { return TypeDefKind }
