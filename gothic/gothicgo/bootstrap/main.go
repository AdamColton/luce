package main

import (
	"fmt"
	"io"

	"github.com/adamcolton/luce/util/luceio"

	"github.com/adamcolton/luce/gothic/gothicgo"
	"github.com/adamcolton/luce/gothic/gothicgo/ggutil"
)

func main() {
	pth := "github.com/adamcolton/luce/gothic/"
	ctx := gothicgo.ContextFactory{
		OutputPath:     ggutil.GoSrc(pth),
		ImportPath:     pth,
		DefaultComment: "Generated by gothicgo/bootstrap - Do not modify",
	}.New()
	pkg := ctx.MustPackage("gothicgo")
	file := pkg.File("type.gen")

	file.AddWriterTo(fullType{"a", "ArrayType"})

	ctx.MustExport()
}

type fullType struct {
	R, Name string
}

func (f fullType) WriteTo(w io.Writer) (int64, error) {
	sw := luceio.NewSumWriter(w)
	sw.WriteStrings(
		fmt.Sprintf(named, f.R, f.Name, f.R),
		fmt.Sprintf(unnamed, f.R, f.Name, f.R),
		fmt.Sprintf(ptr, f.R, f.Name, f.R),
		fmt.Sprintf(slice, f.R, f.Name, f.R),
		fmt.Sprintf(array, f.R, f.Name, f.R),
		fmt.Sprintf(asMapElem, f.R, f.Name, f.R),
		fmt.Sprintf(asMapKey, f.R, f.Name, f.R),
	)
	return sw.Rets()
}

var (
	named = `// Named fulfills Type. Returns a NameType with the given name.
func (%s %s) Named(name string) NameType { return NameType{name, %s} }
`

	unnamed = `// Unnamed funfills Type. Returns a NameType with an empty Name.
func (%s %s) Unnamed() NameType { return NameType{"", %s} }
`

	ptr = `// Ptr funfills Type.
func (%s %s) Ptr() PointerType { return PointerTo(%s) }
`

	slice = `// Slice funfills Type.
func (%s %s) Slice() SliceType { return SliceOf(%s) }
`

	array = `// Array funfills Type. 
func (%s %s) Array(size int) ArrayType { return ArrayOf(%s, size) }
`

	asMapElem = `// AsMapElem funfills Type.
func (%s %s) AsMapElem(key Type) MapType { return MapOf(key, %s) }
`

	asMapKey = `// AsMapKey funfills Type. Returns a NameType with an empty Name.
func (%s %s) AsMapKey(elem Type) MapType { return MapOf(%s, elem) }
`
)
